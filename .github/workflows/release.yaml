name: Release pipeline

# only for version 2.x.x releases, and release candidates
on:
  push:
    tags:
      - v2.?.*
  workflow_dispatch:

env:
  # threatdragon is the working area on docker hub so use this area
  # owasp/threat-dragon is the final release area so DO NOT use that
  IMAGE_NAME: threatdragon/owasp-threat-dragon

# for security reasons the github actions are pinned to specific release versions
jobs:
  site_unit_tests:
    name: Site unit tests
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: td.vue

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Use node LTS 20.14.0
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '20.14.0'

      - name: Cache NPM dir
        uses: actions/cache@v4.2.0
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install packages
        run: npm clean-install

      - name: lint
        run: npm run lint

      - name: Unit test
        run: npm run test:unit

  server_unit_tests:
    name: Server unit tests
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: td.server

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Use node LTS 20.14.0
        uses: actions/setup-node@v4.1.0
        with:
          node-version: '20.14.0'

      - name: Cache NPM dir
        uses: actions/cache@v4.2.0
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install packages
        run: npm clean-install

      - name: lint
        run: npm run lint

      - name: Unit test
        run: npm run test:unit

      - name: Create server SBOM
        run: npm run make-sbom

      - name: Save SBOM artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: sboms-server
          path: './td.server/sbom.*'
          include-hidden-files: true
  github_release:
    name: Publish to github
    runs-on: ubuntu-24.04
    needs: [server_unit_tests, site_unit_tests]

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.3.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.8.0
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v4.2.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            ${{ runner.os }}-

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}

      # platform manifests not (yet) supported, so split out architectures
      - name: Build for amd64 and push to Docker Hub
        id: docker_build_amd64
        uses: docker/build-push-action@v6.11.0
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          platforms: linux/amd64,linux/arm64

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - # Temp fix for large cache bug
        # https://github.com/docker/build-push-action/issues/252
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache